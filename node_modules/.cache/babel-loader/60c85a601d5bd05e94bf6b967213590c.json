{"ast":null,"code":"import Model from \"./model\";\nimport { act } from \"react-dom/test-utils\";\nexport default ((state = {\n  board: [],\n  selectedCell: null\n}, action) => {\n  switch (action.type) {\n    case \"SIMPLE_ACTION\":\n      return {\n        result: action.payload\n      };\n\n    /* case \"onCellSelect\":\r\n      return {\r\n        ...state,\r\n        selected: action.payload\r\n      }; */\n\n    case \"setBoard\":\n      return { ...state,\n        board: action.payload\n      };\n\n    case \"setSelected\":\n      if (state.selectedCell === null) {\n        return { ...state,\n          selectedCell: action.payload\n        };\n      }\n\n      if (state.selectedCell.region === action.payload.region && //asking if old region is the same as the new region\n      state.selectedCell.cell === action.payload.cell //asking if old cell is the same as the new cell\n      ) {\n          //revisar esta comparacion\n          return { ...state,\n            selectedCell: null\n          };\n        }\n\n      return { ...state,\n        selectedCell: action.payload\n      };\n\n    case \"setCellValue\":\n      //sirve para setear el value a una cell\n      let newRegion = [...state.board[action.payload.region].slice(0, action.payload.cell), action.payload.value, ...state.board[action.payload.region].slice(action.payload.cell)];\n      return { ...state,\n        board: [...state.board.slice(0, action.payload.region), newRegion, ...state.board.slice(action.payload.region)]\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/mateo/Documentos/vscProjects/sudoku-kaizen/src/reducers/simpleReducer.js"],"names":["Model","act","state","board","selectedCell","action","type","result","payload","region","cell","newRegion","slice","value"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,SAASC,GAAT,QAAoB,sBAApB;AAEA,gBAAe,CAACC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,YAAY,EAAE;AAA3B,CAAT,EAA4CC,MAA5C,KAAuD;AACpE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,aAAO;AACLC,QAAAA,MAAM,EAAEF,MAAM,CAACG;AADV,OAAP;;AAGF;;;;;;AAMA,SAAK,UAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELC,QAAAA,KAAK,EAAEE,MAAM,CAACG;AAFT,OAAP;;AAKF,SAAK,aAAL;AACE,UAAIN,KAAK,CAACE,YAAN,KAAuB,IAA3B,EAAiC;AAC/B,eAAO,EACL,GAAGF,KADE;AAELE,UAAAA,YAAY,EAAEC,MAAM,CAACG;AAFhB,SAAP;AAID;;AACD,UACEN,KAAK,CAACE,YAAN,CAAmBK,MAAnB,KAA8BJ,MAAM,CAACG,OAAP,CAAeC,MAA7C,IAAuD;AACvDP,MAAAA,KAAK,CAACE,YAAN,CAAmBM,IAAnB,KAA4BL,MAAM,CAACG,OAAP,CAAeE,IAF7C,CAEkD;AAFlD,QAGE;AACA;AACA,iBAAO,EACL,GAAGR,KADE;AAELE,YAAAA,YAAY,EAAE;AAFT,WAAP;AAID;;AACD,aAAO,EACL,GAAGF,KADE;AAELE,QAAAA,YAAY,EAAEC,MAAM,CAACG;AAFhB,OAAP;;AAKF,SAAK,cAAL;AAAqB;AACnB,UAAIG,SAAS,GAAG,CACd,GAAGT,KAAK,CAACC,KAAN,CAAYE,MAAM,CAACG,OAAP,CAAeC,MAA3B,EAAmCG,KAAnC,CAAyC,CAAzC,EAA4CP,MAAM,CAACG,OAAP,CAAeE,IAA3D,CADW,EAEdL,MAAM,CAACG,OAAP,CAAeK,KAFD,EAGd,GAAGX,KAAK,CAACC,KAAN,CAAYE,MAAM,CAACG,OAAP,CAAeC,MAA3B,EAAmCG,KAAnC,CAAyCP,MAAM,CAACG,OAAP,CAAeE,IAAxD,CAHW,CAAhB;AAMA,aAAO,EACL,GAAGR,KADE;AAELC,QAAAA,KAAK,EAAE,CACL,GAAGD,KAAK,CAACC,KAAN,CAAYS,KAAZ,CAAkB,CAAlB,EAAqBP,MAAM,CAACG,OAAP,CAAeC,MAApC,CADE,EAELE,SAFK,EAGL,GAAGT,KAAK,CAACC,KAAN,CAAYS,KAAZ,CAAkBP,MAAM,CAACG,OAAP,CAAeC,MAAjC,CAHE;AAFF,OAAP;;AAQF;AACE,aAAOP,KAAP;AAvDJ;AAyDD,CA1DD","sourcesContent":["import Model from \"./model\";\r\nimport { act } from \"react-dom/test-utils\";\r\n\r\nexport default (state = { board: [], selectedCell: null }, action) => {\r\n  switch (action.type) {\r\n    case \"SIMPLE_ACTION\":\r\n      return {\r\n        result: action.payload\r\n      };\r\n    /* case \"onCellSelect\":\r\n      return {\r\n        ...state,\r\n        selected: action.payload\r\n      }; */\r\n\r\n    case \"setBoard\":\r\n      return {\r\n        ...state,\r\n        board: action.payload\r\n      };\r\n\r\n    case \"setSelected\":\r\n      if (state.selectedCell === null) {\r\n        return {\r\n          ...state,\r\n          selectedCell: action.payload\r\n        };\r\n      }\r\n      if (\r\n        state.selectedCell.region === action.payload.region && //asking if old region is the same as the new region\r\n        state.selectedCell.cell === action.payload.cell //asking if old cell is the same as the new cell\r\n      ) {\r\n        //revisar esta comparacion\r\n        return {\r\n          ...state,\r\n          selectedCell: null\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        selectedCell: action.payload\r\n      };\r\n\r\n    case \"setCellValue\": //sirve para setear el value a una cell\r\n      let newRegion = [\r\n        ...state.board[action.payload.region].slice(0, action.payload.cell),\r\n        action.payload.value,\r\n        ...state.board[action.payload.region].slice(action.payload.cell)\r\n      ];\r\n\r\n      return {\r\n        ...state,\r\n        board: [\r\n          ...state.board.slice(0, action.payload.region),\r\n          newRegion,\r\n          ...state.board.slice(action.payload.region)\r\n        ]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}