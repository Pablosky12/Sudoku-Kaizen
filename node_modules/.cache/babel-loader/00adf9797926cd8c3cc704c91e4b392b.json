{"ast":null,"code":"import Model from \"./model\";\nimport { act } from \"react-dom/test-utils\";\nexport default ((state = {\n  board: []\n}, action) => {\n  switch (action.type) {\n    case \"SIMPLE_ACTION\":\n      return {\n        result: action.payload\n      };\n\n    /* case \"selectCell\":\r\n      return {\r\n        ...state,\r\n        selected: action.payload\r\n      }; */\n\n    case \"setBoard\":\n      return { ...state,\n        board: action.payload\n      };\n\n    case \"setCellValue\":\n      let newRegion = [...state.board[action.payload.region].slice(0, action.payload.cell), action.payload.value, ...state.board[action.payload.region].slice(action.payload.cell)];\n      return { ...state,\n\n        /*board: state.board.map((region, indexRegion) => {\r\n          if (action.payload.region === indexRegion) {\r\n            return region.map( (cell, indexCell) => {\r\n              if (action.payload.cell === indexCell) {\r\n                return action.payload.value;\r\n              } \r\n              return cell;\r\n            } )\r\n          } else {\r\n            return region;\r\n          }\r\n        }\r\n          )*/\n        board: [...state.board.slice(0, action.payload.region), newRegion, ...state.board.slice(action.payload.region)]\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/mateo/Documentos/vscProjects/sudoku-kaizen/src/reducers/simpleReducer.js"],"names":["Model","act","state","board","action","type","result","payload","newRegion","region","slice","cell","value"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,SAASC,GAAT,QAAoB,sBAApB;AAEA,gBAAe,CAACC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAT,EAAwBC,MAAxB,KAAmC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,aAAO;AACLC,QAAAA,MAAM,EAAEF,MAAM,CAACG;AADV,OAAP;;AAGF;;;;;;AAKA,SAAK,UAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELC,QAAAA,KAAK,EAAEC,MAAM,CAACG;AAFT,OAAP;;AAIF,SAAK,cAAL;AACE,UAAIC,SAAS,GAAG,CACd,GAAGN,KAAK,CAACC,KAAN,CAAYC,MAAM,CAACG,OAAP,CAAeE,MAA3B,EAAmCC,KAAnC,CAAyC,CAAzC,EAA4CN,MAAM,CAACG,OAAP,CAAeI,IAA3D,CADW,EAEdP,MAAM,CAACG,OAAP,CAAeK,KAFD,EAGd,GAAGV,KAAK,CAACC,KAAN,CAAYC,MAAM,CAACG,OAAP,CAAeE,MAA3B,EAAmCC,KAAnC,CAAyCN,MAAM,CAACG,OAAP,CAAeI,IAAxD,CAHW,CAAhB;AAMA,aAAO,EACL,GAAGT,KADE;;AAEL;;;;;;;;;;;;;AAaAC,QAAAA,KAAK,EAAE,CACL,GAAGD,KAAK,CAACC,KAAN,CAAYO,KAAZ,CAAkB,CAAlB,EAAqBN,MAAM,CAACG,OAAP,CAAeE,MAApC,CADE,EAELD,SAFK,EAGL,GAAGN,KAAK,CAACC,KAAN,CAAYO,KAAZ,CAAkBN,MAAM,CAACG,OAAP,CAAeE,MAAjC,CAHE;AAfF,OAAP;;AAqBF;AACE,aAAOP,KAAP;AA5CJ;AA8CD,CA/CD","sourcesContent":["import Model from \"./model\";\r\nimport { act } from \"react-dom/test-utils\";\r\n\r\nexport default (state = { board: [] }, action) => {\r\n  switch (action.type) {\r\n    case \"SIMPLE_ACTION\":\r\n      return {\r\n        result: action.payload\r\n      };\r\n    /* case \"selectCell\":\r\n      return {\r\n        ...state,\r\n        selected: action.payload\r\n      }; */\r\n    case \"setBoard\":\r\n      return {\r\n        ...state,\r\n        board: action.payload\r\n      };\r\n    case \"setCellValue\":\r\n      let newRegion = [\r\n        ...state.board[action.payload.region].slice(0, action.payload.cell),\r\n        action.payload.value,\r\n        ...state.board[action.payload.region].slice(action.payload.cell)\r\n      ];\r\n\r\n      return {\r\n        ...state,\r\n        /*board: state.board.map((region, indexRegion) => {\r\n          if (action.payload.region === indexRegion) {\r\n            return region.map( (cell, indexCell) => {\r\n              if (action.payload.cell === indexCell) {\r\n                return action.payload.value;\r\n              } \r\n              return cell;\r\n            } )\r\n          } else {\r\n            return region;\r\n          }\r\n        }\r\n          )*/\r\n        board: [\r\n          ...state.board.slice(0, action.payload.region),\r\n          newRegion,\r\n          ...state.board.slice(action.payload.region)\r\n        ]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}